package solid;

public class solidExam {

	public static void main(String[] args) {
//		SOLID : 객체지향 5대 설계 원칙 ( 객체지향 개발 5대 원리 )
		
//		이 규칙은 무조건 지켜야 하는가?
//		- 당장 지키지 않아도 코드 에러는 없다.
//		- 지켰을 경우, 효과적이고 유지보수성이 좋은 소프트웨어를 만들 수 있다.
		
//		응집도, 결합도
//		- 코드를 작성할 때, 모듈 단위로 구분한다. 파일 = 모듈.
//		- 모듈들을 용도에 맞게 모아놓은 것을 패키지라고 한다.
//		- 패키지를 모아서 하나의 라이브러리를 구축할 수 있다.
//		- 패키지에 원칙 등을 추가한 것을 프레임워크라고 한다.
		
//		응집도 : 모듈의 독립성 그 자체 - 하나의 모듈은 하나의 기능을 수행
//		-응집도 유형 : 우연 < 논리 < 시간 < 절차 < 통신 < 순차 < 기능 
//		결합도 : 외부 모듈과의 연관도 및 상호 의존성 수치 
//		- 결합도의 유형 : 내용 > 공통 > 외부 > 제어 > 스템프 > 자료
		
//		응집도가 높고, 결합도가 낮을수록 좋은 소프트웨어라고 할 수 있다.
		
//		1. SRP Single Responsibility Principle - 단일 책임 원칙
//			- 하나의 모듈은 하나의 기능을 수행한다
//		2. OCP Open Closed Principle
//		3. LSP Liskov Substitution Principle
//		4. ISP Interface Segregation 
//		5. DIP Dependency Inversion Principle
		
		
	}

}
